import os
import time
import asyncio
from datetime import datetime

from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.paths import get_main_path
from handlers.database import Database
from handlers.helpers import get_pretty_hours
from handlers.buildscript import generate_build, generate_key, calc_expiredate
from handlers.mailing import MailingState
import handlers.payment as Payment

from filters.is_admin import AdminFilter

# from handlers.buildscript import generate_build
# with open(os.path.join(get_main_path(), 'output/build.zip'), 'wb') as f:
#     f.write(generate_build(6384965964))
# exit(1)

# SQLite
database = Database()

# Aiogram
# bot = Bot('6818488855:AAHOEMVKUCZb2EpFoMsXY5NQwj1bzecZV4U') # Bot for tests only
bot = Bot(token=os.environ['RAINBOWHASH_API_TOKEN'])
dp = Dispatcher(storage=MemoryStorage())

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    with open(os.path.join(get_main_path(), 'start.html'), encoding='utf-8') as f:
        content = f.read()

    user_id = message.from_user.id

    referrer = None
    if " " in message.text:
        referrer_candidate = message.text.split()[1]

        try:
            referrer_candidate = int(referrer_candidate)

            if not await database.is_user_exists(user_id) and await database.is_user_exists(referrer_candidate):
                referrer = referrer_candidate
        except ValueError:
            pass

    if referrer:
        await database.create_referral(referrer, user_id)
    
    await database.create_new_user(message.from_user.id)
    await message.answer(content, parse_mode=ParseMode.HTML)

@dp.message(Command("paysupport"))
async def cmd_paysupport(message: types.Message):
    await Payment.pay_support_handler(message)

@dp.message(Command("changelog"))
async def cmd_changelog(message: types.Message):
    with open(os.path.join(get_main_path(), 'changelog.html'), encoding='utf-8') as f:
        content = f.read()

    await message.answer(content, parse_mode=ParseMode.HTML)

@dp.message(Command("referral"))
async def cmd_referral(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data='get_referral_link')]
        ]
    )
    
    text = '''<b>–•–æ—Ç–∏—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–µ? –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞!</b> üíµ

<i>üìú –£—Å–ª–æ–≤–∏—è </i>
- –ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç 10% —Å–∫–∏–¥–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏
- –í—ã –ø–æ–ª—É—á–∏—Ç–µ 20% —Å–∫–∏–¥–∫–∏ –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º

<i>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</i>
- –°–∫–∏–¥–∫–∞ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–æ–º
- –°–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –¥—Ä—É–≥–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è
- –°–∫–∏–¥–∫–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π —Å—É–º–º–∏—Ä—É—é—Ç—Å—è
(5 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö = –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
'''

    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

@dp.message(Command("buy"))
async def cmd_buy(message: types.Message):
    telegramid = message.from_user.id

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="30 –º–∏–Ω—É—Ç (0 ‚≠ê)", callback_data="buy_test"),
                InlineKeyboardButton(text=f"8 —á–∞—Å–æ–≤ ({await database.get_hours_price(telegramid, 8)} ‚≠ê)", callback_data="buy_8h", pay=True)
            ],
            [
                InlineKeyboardButton(text=f"24 —á–∞—Å–∞ ({await database.get_hours_price(telegramid, 24)} ‚≠ê)", callback_data="buy_24h", pay=True),
                InlineKeyboardButton(text=f"48 —á–∞—Å–æ–≤ ({await database.get_hours_price(telegramid, 48)} ‚≠ê)", callback_data="buy_48h", pay=True)
            ],
            [
                InlineKeyboardButton(text=f"96 —á–∞—Å–æ–≤ ({await database.get_hours_price(telegramid, 96)} ‚≠ê)", callback_data="buy_96h", pay=True),
                InlineKeyboardButton(text=f"350 —á–∞—Å–æ–≤ ({await database.get_hours_price(telegramid, 350)} ‚≠ê)", callback_data="buy_350h", pay=True)
            ],
            [
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ]
    )

    hours = await database.get_user_hours(telegramid)
    await message.answer(f"‚è≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{get_pretty_hours(hours)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.message(Command("build"))
async def process_get_build(message: types.Message):
    try:
        await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∏–ª–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        zip_file_content = generate_build()
        
        if zip_file_content is None:
            raise Exception("Build error")

        success_text = f"""
<b>‚úÖ –ë–∏–ª–¥ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ!</b>

üí° <i>–°–æ–≤–µ—Ç:</i> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/key telegramid hours</code> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞.

üîë –§–∞–π–ª .key –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º "memhash_worker" –ø–µ—Ä–µ–¥ –µ–≥–æ –∑–∞–ø—É—Å–∫–æ–º.
        """

        # Send the archive
        await bot.send_document(
            message.chat.id,
            BufferedInputFile(zip_file_content, filename=f"build.zip"),
            caption=success_text.strip(),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode=ParseMode.HTML
        )
        print(f"Build error: {e}")

@dp.message(Command("key"))
async def process_generate_key(message: types.Message):
    telegramid = message.from_user.id

    # Extract the arguments
    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            if len(command_parts) == 2:
                target_telegramid = int(telegramid)
                hours = int(command_parts[1])
            else:
                raise ValueError("Incorrect amount of arguments")
        else:
            target_telegramid = int(command_parts[1])
            hours = int(command_parts[2])

        if hours <= 0:
            raise ValueError("Incorrect amount of hours")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/key telegramid hours</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/key 2718291002 5</code>\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/key 5</code>\n\n"
            "<b><a href=\"https://pikabu.ru/story/kak_uznat_identifikator_telegram_kanalachatagruppyi_kak_uznat_chat_id_telegram_bez_botov_i_koda_11099278\">* –ö–∞–∫ —É–∑–Ω–∞—Ç—å Telegram ID?</a></b>",
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    
    user_hours = await database.get_user_hours(telegramid)
    if user_hours < hours:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ.\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{get_pretty_hours(user_hours)}</b>\n"
            f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã –≤—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ: <b>{get_pretty_hours(hours)}</b>\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É—è /buy",
            parse_mode=ParseMode.HTML
        )
        return

    expire_date = await database.get_build_expires(telegramid, target_telegramid)
    if time.time() < expire_date:
        await message.answer(f"ü´° –ù–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.fromtimestamp(expire_date).strftime('%d.%m.%Y - %H:%M:%S')}")
        return

    remaining_hours = user_hours - hours
    await database.set_user_hours(telegramid, remaining_hours)
    
    await message.answer(f"üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ [{target_telegramid} / Hours: {hours}]")

    # Generate the key
    expire_date = calc_expiredate(hours)
    try:
        key_content = generate_key(message.from_user.full_name or str(message.from_user.id), target_telegramid, expire_date + 60)
        if key_content is None:
            raise Exception("Build error")
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)",
            parse_mode=ParseMode.HTML
        )
        print("Generate key error:", e)
        return

    success_text = f"""
<b>‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

üì¶ –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: <b>{target_telegramid}</b>  
‚è≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{get_pretty_hours(hours)}</b>  
üìâ –û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: <b>{get_pretty_hours(remaining_hours)}</b>

üìÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: <b>{datetime.fromtimestamp(expire_date).strftime('%d.%m.%Y - %H:%M:%S')}</b>

‚ö° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–ª—é—á, –ø–æ–º–µ—Å—Ç–∏–≤ –µ–≥–æ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º –≤–æ—Ä–∫–µ—Ä–∞! 

üí° <i>–°–æ–≤–µ—Ç:</i> –ë–∏–ª–¥ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:  
<code>/build</code>

üíô –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! –ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º!
    """
    
    # Send the archive
    await bot.send_document(
        message.chat.id,
        BufferedInputFile(key_content, filename=f"{target_telegramid}.key"),
        caption=success_text.strip(),
        parse_mode=ParseMode.HTML
    )
    await database.create_build(telegramid, target_telegramid, expire_date)

@dp.callback_query(lambda callback: callback.data == "get_referral_link")
async def process_get_referral_link(callback_query: types.CallbackQuery):
    telegramid = callback_query.from_user.id

    me = await bot.get_me()
    referral_link = f"https://t.me/{me.username}?start={telegramid}"
    await callback_query.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{referral_link}</code>", parse_mode=ParseMode.HTML)

@dp.callback_query(lambda callback: callback.data.startswith("buy_"))
async def process_buy(callback_query: types.CallbackQuery):
    telegramid = callback_query.from_user.id

    if callback_query.data == "buy_test":
        hours = 0.5 # Test period

        already_tested = await database.is_user_tested(telegramid)
        if already_tested:
            await callback_query.message.answer("üòî –í—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –∏–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
            return
        
        await Payment.success_payment_script(callback_query.message, bot, hours)
    else:
        hours = int(''.join(c if c.isdigit() else '' for c in callback_query.data))
        await Payment.send_invoice_handler(callback_query, bot, hours)

@dp.callback_query(lambda callback: callback.data == "cancel")
async def process_cancel(callback_query: types.CallbackQuery):
    await callback_query.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    await callback_query.message.edit_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# Admin commands
@dp.message(AdminFilter(), Command("mailing"))
async def command_mailing(message: types.Message, state: FSMContext):
    await state.set_state(MailingState.message)

    cancel_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_mailing')]]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=cancel_button
    )

@dp.callback_query(lambda callback: callback.data == "cancel_mailing")
async def cancel_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await callback_query.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É!')

@dp.message(MailingState.message)
async def process_mailing(message: types.Message, state: FSMContext):
    await state.update_data(message=message)
    await state.clear()

    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!')

    users = await database.get_all_users()
    for user in users:
        await bot.copy_message(chat_id=user, from_chat_id=message.chat.id, message_id=message.message_id)
# --------------

# Entry point
async def main():
    try:
        # Database setup
        await database.init()

        dp.pre_checkout_query.register(Payment.pre_checkout_handler)
        dp.message.register(Payment.success_payment_handler, F.successful_payment)
        
        # Telegram bot
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
