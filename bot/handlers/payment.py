import zipfile
import os
from io import BytesIO
from datetime import datetime

from aiogram import Bot
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery, CallbackQuery, BufferedInputFile

from handlers.database import Database
from keyboards.payment_keyboard import PaymentKeyboard

from handlers.buildscript import generate_script, calc_expiredate, LIFETIME_HOURS

async def send_invoice_handler(query: CallbackQuery, hours: int):
    database = Database()
    price = await database.get_hours_price(query.message.chat.id, hours)

    title = "–î–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞"
    if hours < LIFETIME_HOURS:
        title = f"–î–æ—Å—Ç—É–ø –Ω–∞ {hours} —á–∞—Å–æ–≤"

    message = query.message
    await message.answer_invoice(
        title=title,
        description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏",
        prices=[LabeledPrice(label='XTR', amount = price)],
        provider_token="",
        payload=f'buy_access_{hours}h',
        currency='XTR',
        reply_markup=PaymentKeyboard(price)
    )


async def pre_checkout_handler(query: PreCheckoutQuery):
    await query.answer(ok=True)

async def success_payment_script(message: Message, bot: Bot, hours: int):
    database = Database()
    telegramid = message.chat.id

    price = await database.get_hours_price(telegramid, hours)
    hours += 1/6 # 10 minutes for setup

    # Generate script and send it
    script = generate_script(telegramid, hours).encode()
    if script is None:
        await bot.send_message(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)')
        return
    
    zip_buffer = BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'a', zipfile.ZIP_DEFLATED) as zip_file:
        zip_file.writestr('rainbow-hash/memhash-frontend.fly.dev/index.html', script)
    
    zip_buffer.seek(0)
    zip_file_content = zip_buffer.read()
    
    expire_date = calc_expiredate(hours)
    success_text = f'''
    üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {datetime.fromtimestamp(expire_date).strftime("%d.%m.%Y - %H:%M:%S")}
üíô –£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!
    '''
    await bot.send_document(message.chat.id, BufferedInputFile(zip_file_content, filename="rainbow_hash.zip"), caption=success_text.strip())
    await database.create_buy(telegramid, expire_date, hours, price)

async def success_payment_handler(message: Message, bot: Bot):
    if 'RAINBOWHASH_ALL_REFUND' in os.environ: # For tests
        await bot.refund_star_payment(
            message.chat.id,
            message.successful_payment.telegram_payment_charge_id
        )

    await message.answer("–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    payload = message.successful_payment.invoice_payload
    if payload.startswith('buy_access'):
        hours = int(''.join(c if c.isdigit() else '' for c in payload))
        await success_payment_script(message, bot, hours)
    else:
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)')

async def pay_support_handler(message: Message):
    await message.answer(
        text='''‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–∞–Ω–∫—Ü–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.
        '''
    )
