import os

from aiogram import Bot
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery, CallbackQuery, BufferedInputFile

from handlers.database import Database
from handlers.helpers import get_pretty_hours
from handlers.buildscript import generate_build, calc_expiredate
from keyboards.payment_keyboard import PaymentKeyboard

async def send_invoice_handler(query: CallbackQuery, bot: Bot, hours: int):
    database = Database()
    price = await database.get_hours_price(query.message.chat.id, hours)

    if price <= 0:
        await success_payment_script(query.message, bot, hours)
        return

    title = f"–í—Ä–µ–º—è: {get_pretty_hours(hours)}"

    message = query.message
    await message.answer_invoice(
        title=title,
        description="–ü–æ–∫—É–ø–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
        prices=[LabeledPrice(label='XTR', amount = price)],
        provider_token="",
        payload=f'buy_access_{hours}h',
        currency='XTR',
        reply_markup=PaymentKeyboard(price)
    )

async def pre_checkout_handler(query: PreCheckoutQuery):
    await query.answer(ok=True)

async def success_payment_script(message: Message, bot: Bot, hours: int):
    database = Database()
    telegramid = message.chat.id

    is_test_period = hours < 1

    if not is_test_period:    
        user_hours = await database.get_user_hours(telegramid) + hours
        await database.set_user_hours(telegramid, user_hours)

    if is_test_period:
        hours += 1/6 # test for 10 minutes

        expire_date = calc_expiredate(hours)
        # Generate the build
        try:
            zip_file_content = generate_build(telegramid, hours)
            if zip_file_content is None:
                raise Exception("Build error")
        except Exception as e:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–±—Ä–∞—Ç—å –±–∏–ª–¥.\n\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)",
                parse_mode=ParseMode.HTML
            )
        
        # Send the archive
        await bot.send_document(
            message.chat.id,
            BufferedInputFile(zip_file_content, filename=f"rainbow_hash_{telegramid}.zip"),
            caption=f"""
<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –±–∏–ª–¥ –≥–æ—Ç–æ–≤!</b>

üí° <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</i> –£ –≤–∞—Å –µ—Å—Ç—å 10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∏–Ω—É—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É, –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

üíô <b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!</b>
            """,
            parse_mode=ParseMode.HTML
        )
        await database.create_build(telegramid, telegramid, expire_date)
        await database.create_buy(telegramid, hours, 0)

        return
    
    success_text = f"""
<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!</b>

‚è≥ –ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{get_pretty_hours(hours)}</b>.
–¢–µ–ø–µ—Ä—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: <b>{get_pretty_hours(await database.get_user_hours(telegramid))}</b>.

üì¶ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–¥–∞ –¥–ª—è –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–∏–ª–¥, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: 
<code>/build telegramid hours</code>

üí° <i>–°–æ–≤–µ—Ç:</i> –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è —á–∞—Å—ã –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏! 

üíô <b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!</b>
"""

    price = await database.get_hours_price(telegramid, hours)
    await database.create_buy(telegramid, hours, price)
    await message.answer(success_text, parse_mode=ParseMode.HTML)

async def success_payment_handler(message: Message, bot: Bot):
    if 'RAINBOWHASH_ALL_REFUND' in os.environ: # For tests
        await bot.refund_star_payment(
            message.chat.id,
            message.successful_payment.telegram_payment_charge_id
        )

    payload = message.successful_payment.invoice_payload
    if payload.startswith('buy_access'):
        hours = int(''.join(c if c.isdigit() else '' for c in payload))
        await success_payment_script(message, bot, hours)
    else:
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)')

async def pay_support_handler(message: Message):
    await message.answer(
        text='''‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–∞–Ω–∫—Ü–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.
        '''
    )
